package com.hengyu.cases.service.impl;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.baomidou.mybatisplus.service.impl.ServiceImpl;
import com.hengyu.cases.dao.CommentDAO;
import com.hengyu.cases.entity.Comment;
import com.hengyu.cases.service.CommentService;
import com.hengyu.cases.vo.CommentVo;

import lombok.extern.slf4j.Slf4j;

/**
 * <p>
 * 服务实现类
 * </p>
 *
 * @author allnas
 * @since 2018-08-28
 */
@Slf4j
@Service
public class CommentServiceImpl extends ServiceImpl<CommentDAO, Comment> implements CommentService {
	@Autowired
	private CommentDAO commentDao;

	@Override
	public List<CommentVo> queryCommentByCaseId(Integer caseId) {
		List<CommentVo> commentVoList = commentDao.queryCommentByCaseId(caseId);

		List<CommentVo> list = buildTree(commentVoList);
		log.info("list:{}", list);

		return list;
	}

	// 构建树形结构
	public List<CommentVo> buildTree(List<CommentVo> list) {
		List<CommentVo> treeTreeNodes = new ArrayList<>();
		// 获取所有根节点
		List<CommentVo> rootTreeNodes = getRootTreeNodes(list);
		// 获取每个根节点

		try {
			for (CommentVo rootTreeNode : rootTreeNodes) {
				// 递归这个根节点的子节点
				buildChildTreeNodes(list, rootTreeNode);

				// 用list来存放每个根节点
				treeTreeNodes.add(rootTreeNode);
			}
		} catch (Exception e) {
			log.error(e.getLocalizedMessage(), e);
		}
		return treeTreeNodes;
	}

	// 递归子节点
	public void buildChildTreeNodes(List<CommentVo> list, CommentVo TreeNode) {
		List<CommentVo> children = getChildTreeNodes(list, TreeNode);
		if (!children.isEmpty()) {
			for (CommentVo child : children) {
				buildChildTreeNodes(list, child);
			}
			TreeNode.setChilds(children);
		}
	}

	/**
	 * 获取父节点下所有的子节点
	 * 
	 * @param pTreeNode
	 * @return
	 */
	public List<CommentVo> getChildTreeNodes(List<CommentVo> list, CommentVo pTreeNode) {
		List<CommentVo> childTreeNodes = new ArrayList<>();

		for (CommentVo n : list) {
			if (Objects.equals(pTreeNode.getUserName(), n.getReplyName())) {
				childTreeNodes.add(n);
			}
		}
		return childTreeNodes;
	}

	// 获取集合中所有的根节点
	public List<CommentVo> getRootTreeNodes(List<CommentVo> list) {
		List<CommentVo> rootTreeNodes = new ArrayList<>();
		for (CommentVo n : list) {
			if (Objects.isNull(n.getReplyName())) {
				rootTreeNodes.add(n);
			}
		}
		return rootTreeNodes;
	}
}
