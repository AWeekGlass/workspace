package com.hengyu.system.service.impl;

import java.text.DecimalFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Objects;

import org.apache.commons.lang3.time.FastDateFormat;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.baomidou.mybatisplus.mapper.EntityWrapper;
import com.baomidou.mybatisplus.plugins.Page;
import com.baomidou.mybatisplus.service.impl.ServiceImpl;
import com.hengyu.common.util.EncryptionUtil;
import com.hengyu.service.AdminService;
import com.hengyu.system.dao.CompanyDAO;
import com.hengyu.system.entity.Admin;
import com.hengyu.system.entity.Apply;
import com.hengyu.system.entity.Company;
import com.hengyu.system.po.CompanyPo;
import com.hengyu.system.service.ApplyService;
import com.hengyu.system.service.CompanyService;
import com.hengyu.system.vo.CompanyInfoVo;
import com.hengyu.system.vo.CompanyVo;

/**
 * <p>
 * 中介公司表 服务实现类
 * </p>
 *
 * @author allnas
 * @since 2018-08-22
 */
@Service
public class CompanyServiceImpl extends ServiceImpl<CompanyDAO, Company> implements CompanyService {
	
	@Autowired
	private CompanyDAO companyDao;

	@Autowired
	private AdminService adminService;
	
	@Autowired
	private ApplyService applyService;

	@Override
	public CompanyInfoVo queryCompanyInfoById(Integer id) {
		return companyDao.queryCompanyInfoById(id);
	}

	@Override
	public boolean update(Company company) {
		return updateById(company);
	}

	@Override
	public Company queryCompanyDetailById(Integer id) {
		return selectOne(new EntityWrapper<Company>()
				.setSqlSelect("`name`,abb,province_id,city_id,area_id,address_detail,logo_url").eq("id", id));
	}

	@Override
	public boolean addCompany(CompanyPo companyPo) {
		Company company = new Company();
		company.setName(companyPo.getName());
		company.setProvinceId(companyPo.getProvinceId());
		company.setCityId(companyPo.getCityId());
		company.setAreaId(companyPo.getAreaId());
		company.setAddressDetail(companyPo.getAddressDetail());
		company.setCustomerStatus(companyPo.getCustomerStatus());
		company.setStatus(1);// 设置为待审核状态
		company.setCreateTime(new Date());
		company.setSignDate(new Date());
		// 获取七天之后的日期
		Calendar calendar = Calendar.getInstance();
		calendar.add(Calendar.DAY_OF_MONTH, 7);
		company.setExpireDate(calendar.getTime());
		if (Objects.nonNull(companyPo.getBusinessUrl())) {
			company.setBusinessUrl(companyPo.getBusinessUrl());
		}
		// 新增公司
		boolean flag = insert(company);

		if (flag) {// 新增公司用户
			Admin admin = new Admin();
			admin.setUserName(companyPo.getUserName());
			admin.setPhone(companyPo.getPhone());
			admin.setInviterPhone(companyPo.getInviterPhone());
			String password = companyPo.getPassword();
			admin.setPassword(EncryptionUtil.getSHA256StrJava(password));
			admin.setCreateTime(new Date());
			admin.setCompanyId(company.getId());
			admin.setStatus(2);
			adminService.addCompany(null, admin);
			
			//新增审批记录
			Apply apply = new Apply();
			apply.setCompanyId(company.getId());
			apply.setNumber(getRandom());
			apply.setState(1);//设置为待审批状态
			apply.setUserId(admin.getId());
			applyService.insert(apply);
		}
		return flag;
	}
	
	@Override
	public boolean createCompany(Company company) {
		company.setCustomerStatus(1);//试用用户
		company.setStatus(1);// 设置为待审核状态
		// 新增公司
		boolean flag = insert(company);
		if (flag) {			
			//新增审批记录
			Apply apply = new Apply();
			apply.setCompanyId(company.getId());
			apply.setNumber(getRandom()); 
			apply.setState(1);//设置为待审批状态
			apply.setUserId(company.getAdminId());
			applyService.insert(apply);
		}
		return flag;
	}

	@Override
	public CompanyVo queryDetailById(Integer id) {
		return companyDao.queryDetailById(id);
	}

	@Override
	public Page<Company> getList(Page<Company> page, Company company) {
		List<Company> list = companyDao.getList(page, company);
		for (Company cp : list) {//查询门店和公司人数
			Integer store = companyDao.countStore(cp.getId());
			Integer staff = companyDao.countStaff(cp.getId());
			cp.setStaffNum(staff);
			cp.setStoreNum(store);
		}
		return page.setRecords(list);
	}
	
	/**
	 * 生成审批记录编号
	 * 
	 * @return
	 */
	private String getRandom() {
		Integer num = applyService.selectCount(new EntityWrapper<Apply>().eq("createTime", new Date()));
		num++;
		DecimalFormat df = new DecimalFormat("000");
		String str2 = df.format(num);
		return FastDateFormat.getInstance("yyyyMMdd").format(new Date())+str2;
	}

	@Override
	public boolean deleteAdmin(String phone) {
		Integer count = companyDao.deleteAdmin(phone);
		return count== 1? true:false;
	}

}
