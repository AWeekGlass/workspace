package com.hengyu.user.service.impl;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import com.alibaba.fastjson.JSONObject;
import com.baomidou.mybatisplus.plugins.Page;
import com.baomidou.mybatisplus.service.impl.ServiceImpl;
import com.hengyu.common.entity.TemplateData;
import com.hengyu.common.entity.WechatTemplate;
import com.hengyu.common.jwt.JWTInfo;
import com.hengyu.common.util.EncryptionUtil;
import com.hengyu.common.util.HttpRequest;
import com.hengyu.common.util.JWTUtils;
import com.hengyu.common.util.JsonUtils;
import com.hengyu.user.dao.AdminDAO;
import com.hengyu.user.dao.ChangePhoneDAO;
import com.hengyu.user.dao.SmsVerifyDAO;
import com.hengyu.user.entity.Admin;
import com.hengyu.user.entity.ChangePhone;
import com.hengyu.user.entity.SmsVerify;
import com.hengyu.user.po.ChangePhonePo;
import com.hengyu.user.service.AdminService;
import com.hengyu.user.vo.AdminFullVo;
import com.hengyu.user.vo.AdminMiddleVo;
import com.hengyu.user.vo.AdminShortVo;
import com.hengyu.user.vo.AdminSmallVo;
import com.hengyu.user.vo.AdminVo;
import com.hengyu.user.vo.MyInfoVo;

import lombok.extern.slf4j.Slf4j;

/**
 * <p>
 * 中介用户表 服务实现类
 * </p>
 *
 * @author allnas
 * @since 2018-08-22
 */
@Slf4j
@Service
public class AdminServiceImpl extends ServiceImpl<AdminDAO, Admin> implements AdminService {
	@Autowired
	private AdminDAO adminDAO;

	@Autowired
	private JWTUtils jwtUtil;

	@Autowired
	private SmsVerifyDAO smsVerifyDAO;

	@Autowired
	private ChangePhoneDAO changePhoneDAO;

	@Value("${wx.appid}")
	private String appId;
	
	@Value("${wx.change_ms_tem}")
	private String changeMsTem;
	
	@Value("${wx.url}")
	private String url;

	@Value("${wx.secret}")
	private String secret;

	private final String REQUESTURL = "https://api.weixin.qq.com/cgi-bin/message/template/send";
	
	private final String GET_ACCESS_TOKEN = "https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&appid="+ appId +"&secret="+ secret;

	@Override
	public Page<AdminMiddleVo> queryList(Page<AdminMiddleVo> page, Map<String, Object> parameterMap) {
		return page.setRecords(adminDAO.queryList(page, parameterMap));
	}

	@Override
	public String login(String phone, String password) throws Exception {
		AdminShortVo adminShortVo = adminDAO.login(phone, EncryptionUtil.getSHA256StrJava(password));
		if (Objects.nonNull(adminShortVo)) {
			JWTInfo jwtInfo = new JWTInfo();
			jwtInfo.setId(adminShortVo.getId());
			jwtInfo.setUserName(adminShortVo.getUserName());
			jwtInfo.setCompanyId(adminShortVo.getCompanyId());
			jwtInfo.setCompanyName(adminShortVo.getCompanyName());
			return jwtUtil.generateToken(jwtInfo);
		}
		return "";
	}

	@Override
	public AdminVo queryDetailById(Integer id) {
		return adminDAO.queryDetailById(id);
	}

	@Override
	public Integer queryCntByStoreId(Integer storeId) {
		return adminDAO.queryCntByStoreId(storeId);
	}

	@Override
	public boolean updateDelFlag(List<String> ids) {
		List<Admin> list = ids.stream().map(id -> {
			Admin admin = new Admin();
			admin.setId(Integer.parseInt(id));
			admin.setDelFlag(1);
			return admin;
		}).collect(Collectors.toList());
		return updateBatchById(list);
	}

	@Override
	public Boolean checkPwd(Integer adminId, String password) {
		return adminDAO.checkPwd(adminId, password);
	}

	@Override
	public AdminFullVo queryResumeById(Integer id) {
		return adminDAO.queryResumeById(id);
	}

	@Override
	public List<AdminSmallVo> queryByUserName(Integer companyId, String userName) {
		return adminDAO.queryByUserName(companyId, userName);
	}

	@Override
	public Integer checkPhone(String phone) {
		return adminDAO.checkPhone(phone);
	}

	@Override
	public String registe(Admin admin) {
		// 验证两次密码是否一直
		if (!Objects.equals(admin.getPassword(), admin.getRePassword())) {
			return "两次密码不一致!";
		}
		// 校验验证码
		SmsVerify smsVerify = new SmsVerify();
		smsVerify.setType(1);
		smsVerify.setPhone(admin.getTelephone());
		smsVerify.setValidLastTime(new Date());
		smsVerify = smsVerifyDAO.verifySmsCode(smsVerify);
		if (Objects.nonNull(smsVerify) && Objects.equals(smsVerify.getSmsCode(), admin.getCode())) {
			smsVerify.setIsValid(0);
			smsVerifyDAO.updateById(smsVerify);
			// 如果没有推荐人，则设置推荐为null
			if (Objects.equals("0", admin.getInviterPhone())) {
				admin.setInviterPhone(null);
			}
			// 密码加密
			admin.setPassword(EncryptionUtil.getSHA256StrJava(admin.getPassword()));
			boolean flag = insert(admin);
			if (flag) {
				return "注册成功!";
			} else {
				return "注册失败!";
			}

		} else {
			return "验证码不正确";
		}
	}

	@Override
	public String changePhone(ChangePhonePo changePhonePo) {
		// 查询手机验证码
		SmsVerify smsVerify = new SmsVerify();
		smsVerify.setType(1);
		smsVerify.setPhone(changePhonePo.getNewPhone());
		smsVerify.setValidLastTime(new Date());
		smsVerify = smsVerifyDAO.verifySmsCode(smsVerify);
		if (Objects.isNull(smsVerify) || !Objects.equals(smsVerify.getSmsCode(), changePhonePo.getCode())) {
			return "验证码不正确";
		}
		Admin admin = selectById(changePhonePo.getUserId());
		if (Objects.isNull(admin) || !Objects.equals(changePhonePo.getOldPhone(), admin.getTelephone())) {
			return "原手机号输入错误";
		}
		admin.setTelephone(changePhonePo.getNewPhone());
		boolean falg = updateById(admin);
		if (falg) {
			// 新增更换手机号记录
			ChangePhone changePhone = new ChangePhone();
			changePhone.setOldPhone(changePhonePo.getOldPhone());
			changePhone.setNewPhone(changePhonePo.getNewPhone());
			changePhone.setUserId(changePhonePo.getUserId());
			changePhone.setCompanyId(changePhonePo.getCompanyId());
			changePhoneDAO.insert(changePhone);
			return "提交成功";

		} else {
			return "更换失败";
		}
	}

	@Override
	public MyInfoVo queryMyInfo(Integer userId) {
		return adminDAO.queryMyInfo(userId);
	}
	
	public static void main(String[] args) {
		sendWXMessage("ofs1t1mKEMh6UeFsbcv6kM1aMPUY","18851815112","刘海南","赵进");
	}

	public static boolean sendWXMessage(String openid,String phone,String userName,String charName){
		// 获取基础支持的access_token
//	    String json = HttpRequest.sendGet(GET_ACCESS_TOKEN, null);
//	    JSONObject jsonObject = JSONObject.parseObject(json);
//	    String access_token = jsonObject.get("access_token").toString();
	    
		String access_token = "16_7VjLcgP3uyum5F7xUUDMBhAX7x9YkXoyJsVCWwaOYUxaWqyg2n7ZPX04G-HIBJjmyMJOdYExhzYZh0CaVucYycN5gU6dWE05I22aD2C9lqj8AGnnY_T_10E8-g3s_6_rNlLkpOdirKKUbnyaIGZjAEADBU";
	    // 发送模板消息
//	    String resultUrl2 = REQUESTURL+access_token;
	    String resultUrl2 = "https://api.weixin.qq.com/cgi-bin/message/template/send?access_token="+access_token;
	    // 封装基础数据
	    WechatTemplate wechatTemplate = new WechatTemplate();
	    //模板id
	    wechatTemplate.setTemplate_id("CBxuHb4B5fPTJAVRAm7_RTdaADwvG_nLb-w527hiLuI");
	    //发送用户openid
	    wechatTemplate.setTouser(openid);
	    //跳转详情URL
	    wechatTemplate.setUrl("http://www.baidu.com");
	    Map<String,TemplateData> mapdata = new HashMap<>();
	    // 封装模板数据
	    TemplateData first = new TemplateData();
	    first.setValue("申请加入企业!");
	    first.setColor("#173177");
	    mapdata.put("first", first);
	 
	    TemplateData keyword1 = new TemplateData();
	    keyword1.setValue(userName);
	    first.setColor("#173177");
	    mapdata.put("keyword1", keyword1);
	 
	    TemplateData keyword2 = new TemplateData();
	    keyword2.setValue(phone);
	    first.setColor("#173177");
	    mapdata.put("keyword2", keyword2);
	 
	    TemplateData keyword3 = new TemplateData();
	    SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm");
	    String format = formatter.format(new Date());
	    keyword3.setValue(format);
	    keyword3.setColor("#173177");
	    mapdata.put("keyword3", keyword3);
	    
	    TemplateData keyword4 = new TemplateData();
	    keyword4.setValue(charName);
	    first.setColor("#173177");
	    mapdata.put("keyword4", keyword4);
	 
	    TemplateData keyword5 = new TemplateData();
	    keyword5.setValue("请核对申请人信息！");
	    first.setColor("#173177");
	    mapdata.put("remark", keyword5);
	    
	    wechatTemplate.setData(mapdata);
	    String toString = JsonUtils.toJsonString(wechatTemplate);
	    String json2 = HttpRequest.sendPost(resultUrl2, toString);
	    JSONObject jsonObject2 = JSONObject.parseObject(json2);
	    int result = 0;
	    if (null != jsonObject2) {
	    	jsonObject2.getIntValue("errcode");
	        if (0 != jsonObject2.getIntValue("errcode")) {
	            result = jsonObject2.getIntValue("errcode");
	            log.error("错误 errcode:{} errmsg:{}", jsonObject2.getInteger("errcode"), jsonObject2.get("errmsg").toString());
	        }
	    }
	    log.info("模板消息发送结果："+result);

		return false;
	}

}
